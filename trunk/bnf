/******************************************************************************
 * author  : lukas singer
 * created : 2014/11/22
 * brief   : defines the grammar of qpl
 *
 *
 * readme  : this is an bnf-style syntax description.
 *           names surrounded by "<" and ">" are non terminal symbols.
 *           non terminal symbols must be defined in this document.
 *           non terminal symbols may only contain letters ("a" - "z") and "-".
 *           the non terminal symbol on the left of a "::=" will be defined
 *           by a list of terminal and/or non terminal symbols on the right
 *           side of the "::=".
 *           a terminal symbol is an quoted c-style string.
 *           a list is a series of terminal and/or non terminal symbols
 *           seperated by "|" (without quotes).
 *           a list surrounded by "[" and "]" represents non or one of the
 *           elements in the list.
 *           a list surrounded by "[" and "]" followed by "+" represents one
 *           or more (arbitrary many) of the elements in the list.
 *           a list surrounded by "[" and "]" followed by "*" represents non,
 *           one or more (arbitrary many) of the elements in the list.
 *           a list surrounded by "(" and ")" or not surrounded by anything
 *           represents exactly one element in the list.
 *           empty lists (f.e. "[]", "[|]", "()", "(|)") are not allowed.
 *           every definition ends with a ";".
 *           comments are allowed everywhere except inside of non terminal or
 *           terminal symbols.
 *           comments are traditional c-style comments. a comment starts with
 *           "/" followed by "*" and ends with "*" followed by "/".
 *
 *
 * appendix: paranthesis:
 *             "(" and ")" are normaly not used in bnf, but i use them, here is
 *             why:
 *               it is not necasary to use "(" and ")". a not surrounded list 
 *               is exactly the same, but it is much more readable when
 *               parenthesis are used.
 *             for example:
 *               concatenation of either "a", "b" or "c" with either "x", "y"
 *               or "z" (--> "ax", "ay", "az", "bx", and so on):
 *               "a" | "b" | "c" "x" | "y" | "z"
 *               is the same as
 *               ("a" | "b" | "c") ("x" | "y" | "z")
 *               but i reccommend to use parenthesis to make it more readable.
 *             exception:
 *               the outher most list of an definition don't need parenthesis
 *               to be readable. here it is better not to use parenthesis.
 *               example:
 *                 <abc> ::= ( "a"
 *                         | "b"
 *                         | "c" )
 *                         ;
 *                 is the same as
 *                 <abc> ::= "a"
 *                         | "b"
 *                         | "c"
 *                         ;
 *
 *           styleguide:
 *             write every element of the outher most list of the definition
 *             in a seperate line. place the seperating "|" of the outher most
 *             list at the beginning of each line. start the line aligned to
 *             the "=" of the "::=". keep your lines shorter than 80 
 *             characters. if you have longer lines split them and indent them
 *             with 2 spaces. don't use tabs.
 *             align the trailing ";" of each definition under the "=" of the
 *             "::=".
 *
 *           if you make changes:
 *             add a short description containing the date and your name to
 *             the end of the "changes" section in this comment block.
 *
 *
 * changes : lukas singer 2015/01/03:
 *           changed some stuff to match the implemented grammar (pyrser.y)
 *
 *
 *****************************************************************************/

<program> ::= <statements>
            ;

<statements> ::=  /* empty */
               |  <statements> <statement>
               ;

<statement> ::= <assignment> ";"
              | <conditional>
              | <loop>
              | <call> ";"
              ;

<assignment> ::= <identifier> "=" <expression>
               | <identifier> "=" <function>
               ;

<expression> ::= <term> ("+" | "-" | "$" | "|" | <compare>) <expression>
               | <term>
               ;

<term> ::= <factor> ("*" | "/" | "%" | "&") <term>
         | <factor>
         ;

<factor> ::= <integer>
           | <double>
           | <bool>
           | <string>
           | <identifier>
           | <call>
           | "(" <expression> ")"
           ;

<bool> ::= "true"
         | "false"
         ;

<compare> ::= ">" | "<"
            | ">=" | "<="
            | "==" | "!="
            ;

<conditional> ::= <if-statement> [<elif-statement>]* [<else-statement>]
                ;

<if-statement> ::= "if" "(" <expression> ")" <block>
                 ;

<elif-statement> ::= "elif" "(" <expression> ")" <block>
                   ;

<else-statement> ::= "else" <block>
                   ;

<loop> ::= <while-loop>
         | <do-while-loop>
         ;

<while-loop> ::= "while" "(" <expression> ")" <block>
               ;

<do-while-loop> ::= "do" <block> "while" "(" <expression> ")"
                  ;

<block> ::= "{" <statements> "}"
          ;

<identifier> ::= "@"  /* "@"  is the result of an function */
               | (<letters> | "_") [<letters> | "_" | <numerals>]*
               ;

<string> ::= "\"" [ <letters> | <numerals> | <special-chars> ]* "\""
           ;

<double> ::= <integer> "." [<numerals>]+
           ;

<integer> ::= "-" <pos-integer>
            | <pos-integer> ;

<pos-integer> ::= <zero>
                | <non-zero-numerals> [<numerals>]* ;

<numerals> ::= <zero>
             | <non-zero-numerals> ;

<non-zero-numerals> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

<zero> ::= "0" ;

<letters> ::= <lower-case-letters>
            | <upper-case-letters>
            ;

<lower-case-letters> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i"
                       | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
                       | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
                       ;

<upper-case-letters> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I"
                       | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R"
                       | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
                       ;

<special-chars> ::= "!" | "ยง" | "$" | "%" | "&" | "/" | "(" | ")" | "=" | "?"
                  | "*" | "+" | "'" | "#" | "-" | "_" | "." | ":" | "," | ";"
                  | /* all printable ascii chars */ 
                  ;

<call> ::= <identifier> "(" <call-args> ")"
         | <function> "(" <call-args> ")"
         ;

<call-args> ::= /* empty */
              | <non-empty-call-args>
              ;

<non-empty-call-args> ::= <expression>
                        | <expression> "," <non-empty-call-args>
                        ;

<function> ::= "@" "(" <params> ")" <block>
             ;

<params> ::= /* empty */
           | <non-empty-params>
           ;

<non-empty-params> ::= <identifier>
                     | <identifier> "," <non-empty-params>
                     ;
